{"prompt": "Get the total number of open incidents for each building", "completion": "SELECT b.bldBuildingName_TXT, COUNT(il.IncidentLog_PRK) AS OpenIncidentCount FROM IncidentLog_TBL il INNER JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlClosedDateTime_DTM IS NULL GROUP BY b.bldBuildingName_TXT;"}
{"prompt": "List incidents with their category and building, that had arrests made", "completion": "SELECT il.inlFileNo_TXT, ic.incName_TXT AS Category, b.bldBuildingName_TXT, il.inlArrestedCount_LNG FROM IncidentLog_TBL il LEFT JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK LEFT JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlArrestsMade_BLN = 1;"}
{"prompt": "Show average incident closure time for each category", "completion": "SELECT ic.incName_TXT AS Category, AVG(DATEDIFF(HOUR, il.inlDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgCloseTimeHrs FROM IncidentLog_TBL il INNER JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY ic.incName_TXT;"}
{"prompt": "List incidents with location and their status name", "completion": "SELECT il.inlFileNo_TXT, il.inlLocation_MEM, ist.insName_TXT AS Status FROM IncidentLog_TBL il LEFT JOIN IncidentStatus_TBL ist ON il.inlStatus_FRK = ist.IncidentStatus_PRK;"}
{"prompt": "Find incidents with details where category is deactivated", "completion": "SELECT il.inlFileNo_TXT, il.inlDateTime_DTM, il.inlIncidentDetails_MEM, ic.incName_TXT FROM IncidentLog_TBL il INNER JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE ic.incDeactivated_BLN = 1;"}
{"prompt": "Count of incidents per status for each category", "completion": "SELECT ic.incName_TXT AS Category, ist.insName_TXT AS Status, COUNT(il.IncidentLog_PRK) AS IncidentCount FROM IncidentLog_TBL il LEFT JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK LEFT JOIN IncidentStatus_TBL ist ON il.inlStatus_FRK = ist.IncidentStatus_PRK GROUP BY ic.incName_TXT, ist.insName_TXT;"}
{"prompt": "Get incidents that occurred at buildings with vulnerable flag set", "completion": "SELECT il.inlFileNo_TXT, il.inlDateTime_DTM, b.bldBuildingName_TXT FROM IncidentLog_TBL il INNER JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE b.bldVunerableBuilding_BLN = 1;"}
{"prompt": "Get incidents that were reported from a specific location and have result details", "completion": "SELECT il.inlFileNo_TXT, il.inlLocation_MEM, il.inlResultDetails_MEM FROM IncidentLog_TBL il WHERE il.inlResultDetails_MEM IS NOT NULL AND il.inlLocation_MEM LIKE '%lobby%';"}
{"prompt": "Find top 3 incident categories with the most incidents this month", "completion": "SELECT TOP 3 ic.incName_TXT AS Category, COUNT(il.IncidentLog_PRK) AS Count FROM IncidentLog_TBL il INNER JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE MONTH(il.inlDateTime_DTM) = MONTH(GETDATE()) AND YEAR(il.inlDateTime_DTM) = YEAR(GETDATE()) GROUP BY ic.incName_TXT ORDER BY Count DESC;"}
{"prompt": "Show incidents with fines and their building info", "completion": "SELECT il.inlFileNo_TXT, il.inlFines_TXT, b.bldBuildingName_TXT, b.bldPostCode_TXT FROM IncidentLog_TBL il INNER JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlFinesMade_BLN = 1;"}
{"prompt": "Get incidents reported by supervisors within the last 90 days", "completion": "SELECT il.inlFileNo_TXT, il.inlDateTime_DTM, il.inlReportedBy_FRK FROM IncidentLog_TBL il WHERE il.inlSupervisor_FRK IS NOT NULL AND il.inlDateTime_DTM >= DATEADD(DAY, -90, GETDATE());"}
{"prompt": "Count incidents with crime numbers assigned per month", "completion": "SELECT MONTH(il.inlDateTime_DTM) AS Month, COUNT(il.IncidentLog_PRK) AS CrimeIncidentCount FROM IncidentLog_TBL il WHERE il.inlCrimeNum_TXT IS NOT NULL GROUP BY MONTH(il.inlDateTime_DTM);"}
{"prompt": "List incidents where alarms were not acknowledged", "completion": "SELECT il.inlFileNo_TXT, il.inlDateTime_DTM FROM IncidentLog_TBL il WHERE il.inlAlarmAcknowledgedDateTime_DTM IS NULL AND il.inlAlarmMessage_TXT IS NOT NULL;"}
{"prompt": "Show open incidents where arrests were made but no result details", "completion": "SELECT il.inlFileNo_TXT, il.inlArrestedCount_LNG FROM IncidentLog_TBL il WHERE il.inlArrestsMade_BLN = 1 AND il.inlResultDetails_MEM IS NULL AND il.inlClosedDateTime_DTM IS NULL;"}
{"prompt": "Get average number of arrests per category", "completion": "SELECT ic.incName_TXT AS Category, AVG(CAST(il.inlArrestedCount_LNG AS FLOAT)) AS AvgArrests FROM IncidentLog_TBL il INNER JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE il.inlArrestedCount_LNG IS NOT NULL GROUP BY ic.incName_TXT;"}
{"prompt": "List all incidents with latitude and longitude info", "completion": "SELECT il.inlFileNo_TXT, il.inlLatitude_DEC, il.inlLongitude_DEC FROM IncidentLog_TBL il WHERE il.inlLatitude_DEC IS NOT NULL AND il.inlLongitude_DEC IS NOT NULL;"}
{"prompt": "Get recent restricted incidents with building and status", "completion": "SELECT il.inlFileNo_TXT, b.bldBuildingName_TXT, ist.insName_TXT AS Status FROM IncidentLog_TBL il LEFT JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK LEFT JOIN IncidentStatus_TBL ist ON il.inlStatus_FRK = ist.IncidentStatus_PRK WHERE (il.inlRestricted_BLN = 1 OR il.inlRestricted2_BLN = 1) AND il.inlDateTime_DTM >= DATEADD(DAY, -30, GETDATE());"}
{"prompt": "Get incident count per alarm priority level", "completion": "SELECT il.inlAlarmPriority_LNG AS AlarmPriority, COUNT(il.IncidentLog_PRK) AS IncidentCount FROM IncidentLog_TBL il WHERE il.inlAlarmPriority_LNG IS NOT NULL GROUP BY il.inlAlarmPriority_LNG ORDER BY AlarmPriority;"}
{"prompt": "Find incidents with missing category and status", "completion": "SELECT il.inlFileNo_TXT, il.inlDateTime_DTM FROM IncidentLog_TBL il WHERE il.inlCategory_FRK IS NULL AND il.inlStatus_FRK IS NULL;"}
{"prompt": "Get incidents where supervisors were involved and result details exist", "completion": "SELECT il.inlFileNo_TXT, il.inlSupervisor_FRK, il.inlResultDetails_MEM FROM IncidentLog_TBL il WHERE il.inlSupervisor_FRK IS NOT NULL AND il.inlResultDetails_MEM IS NOT NULL;"}
{"prompt": "List incidents with their category, subcategory, and sub-subcategory names", "completion": "SELECT il.inlFileNo_TXT, ic.incName_TXT AS Category, isc.iscName_TXT AS SubCategory, iss.issName_TXT AS SubSubCategory FROM IncidentLog_TBL il LEFT JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK LEFT JOIN IncidentSubCategory_TBL isc ON il.inlSubCategory_FRK = isc.IncidentSubCategory_PRK LEFT JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK;"}
{"prompt": "Count incidents grouped by subcategory", "completion": "SELECT isc.iscName_TXT AS SubCategory, COUNT(il.IncidentLog_PRK) AS IncidentCount FROM IncidentLog_TBL il LEFT JOIN IncidentSubCategory_TBL isc ON il.inlSubCategory_FRK = isc.IncidentSubCategory_PRK GROUP BY isc.iscName_TXT ORDER BY IncidentCount DESC;"}
{"prompt": "Find incidents where sub-subcategory exists but subcategory is missing", "completion": "SELECT il.inlFileNo_TXT, iss.issName_TXT FROM IncidentLog_TBL il LEFT JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK WHERE il.inlSubCategory_FRK IS NULL AND il.inlSubSubCategory_FRK IS NOT NULL;"}
{"prompt": "Get average number of incidents per subcategory under each parent category", "completion": "SELECT ic.incName_TXT AS Category, COUNT(il.IncidentLog_PRK) / COUNT(DISTINCT isc.IncidentSubCategory_PRK) AS AvgPerSubCategory FROM IncidentLog_TBL il INNER JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK INNER JOIN IncidentSubCategory_TBL isc ON isc.iscParentCategory_FRK = ic.IncidentCategory_PRK GROUP BY ic.incName_TXT;"}
{"prompt": "Show recent incidents with both subcategory and sub-subcategory details", "completion": "SELECT il.inlFileNo_TXT, isc.iscName_TXT AS SubCategory, iss.issName_TXT AS SubSubCategory FROM IncidentLog_TBL il LEFT JOIN IncidentSubCategory_TBL isc ON il.inlSubCategory_FRK = isc.IncidentSubCategory_PRK LEFT JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK WHERE il.inlDateTime_DTM >= DATEADD(DAY, -15, GETDATE());"}
{"prompt": "Get top 5 most used sub-subcategories", "completion": "SELECT TOP 5 iss.issName_TXT, COUNT(il.IncidentLog_PRK) AS UsageCount FROM IncidentLog_TBL il LEFT JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK GROUP BY iss.issName_TXT ORDER BY UsageCount DESC;"}
{"prompt": "Find subcategories that are not linked to any incident", "completion": "SELECT isc.iscName_TXT FROM IncidentSubCategory_TBL isc LEFT JOIN IncidentLog_TBL il ON il.inlSubCategory_FRK = isc.IncidentSubCategory_PRK WHERE il.IncidentLog_PRK IS NULL;"}
{"prompt": "List all categories with count of subcategories and sub-subcategories", "completion": "SELECT ic.incName_TXT AS Category, COUNT(DISTINCT isc.IncidentSubCategory_PRK) AS SubCategoryCount, COUNT(DISTINCT iss.IncidentSubSubCategory_PRK) AS SubSubCategoryCount FROM IncidentCategory_TBL ic LEFT JOIN IncidentSubCategory_TBL isc ON isc.iscParentCategory_FRK = ic.IncidentCategory_PRK LEFT JOIN IncidentSubSubCategory_TBL iss ON iss.issParentSubCategory_FRK = isc.IncidentSubCategory_PRK GROUP BY ic.incName_TXT;"}
{"prompt": "Get incidents where subcategory is linked but sub-subcategory is missing", "completion": "SELECT il.inlFileNo_TXT, isc.iscName_TXT AS SubCategory FROM IncidentLog_TBL il LEFT JOIN IncidentSubCategory_TBL isc ON il.inlSubCategory_FRK = isc.IncidentSubCategory_PRK WHERE il.inlSubSubCategory_FRK IS NULL AND il.inlSubCategory_FRK IS NOT NULL;"}
{"prompt": "Count incidents for each sub-subcategory under a specific subcategory", "completion": "SELECT iss.issName_TXT, COUNT(il.IncidentLog_PRK) AS IncidentCount FROM IncidentLog_TBL il INNER JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK WHERE iss.issParentSubCategory_FRK = @SubCategoryID GROUP BY iss.issName_TXT;"}
{"prompt": "Show incidents where all three category levels are null", "completion": "SELECT il.inlFileNo_TXT, il.inlDateTime_DTM FROM IncidentLog_TBL il WHERE il.inlCategory_FRK IS NULL AND il.inlSubCategory_FRK IS NULL AND il.inlSubSubCategory_FRK IS NULL;"}
{"prompt": "Find the most recent incident for each sub-subcategory", "completion": "SELECT iss.issName_TXT, MAX(il.inlDateTime_DTM) AS MostRecent FROM IncidentLog_TBL il INNER JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK GROUP BY iss.issName_TXT;"}
{"prompt": "Get average map colour value used in subcategories", "completion": "SELECT AVG(CAST(isc.iscMapColour_LNG AS FLOAT)) AS AvgMapColour FROM IncidentSubCategory_TBL isc WHERE isc.iscMapColour_LNG IS NOT NULL;"}
{"prompt": "List sub-subcategories linked to more than 5 incidents", "completion": "SELECT iss.issName_TXT, COUNT(il.IncidentLog_PRK) AS Total FROM IncidentLog_TBL il INNER JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK GROUP BY iss.issName_TXT HAVING COUNT(il.IncidentLog_PRK) > 5;"}
{"prompt": "Get total incidents per system under each parent category", "completion": "SELECT ic.incName_TXT AS Category, isc.iscSystem_FRK, COUNT(il.IncidentLog_PRK) AS TotalIncidents FROM IncidentLog_TBL il INNER JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK INNER JOIN IncidentSubCategory_TBL isc ON il.inlSubCategory_FRK = isc.IncidentSubCategory_PRK GROUP BY ic.incName_TXT, isc.iscSystem_FRK;"}
{"prompt": "Find subcategories with multiple parent categories (if any)", "completion": "SELECT isc.iscName_TXT, COUNT(DISTINCT ic.IncidentCategory_PRK) AS ParentCategories FROM IncidentSubCategory_TBL isc INNER JOIN IncidentCategory_TBL ic ON isc.iscParentCategory_FRK = ic.IncidentCategory_PRK GROUP BY isc.iscName_TXT HAVING COUNT(DISTINCT ic.IncidentCategory_PRK) > 1;"}
{"prompt": "Count distinct sub-subcategories used in the last 30 days", "completion": "SELECT COUNT(DISTINCT iss.IncidentSubSubCategory_PRK) AS SubSubCategoryUsed FROM IncidentLog_TBL il INNER JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK WHERE il.inlDateTime_DTM >= DATEADD(DAY, -30, GETDATE());"}
{"prompt": "List all subcategories under a given category", "completion": "SELECT isc.iscName_TXT FROM IncidentSubCategory_TBL isc WHERE isc.iscParentCategory_FRK = @CategoryID;"}
{"prompt": "Get average number of incidents per sub-subcategory", "completion": "SELECT AVG(IncidentCount) AS AvgPerSubSub FROM (SELECT iss.issName_TXT, COUNT(il.IncidentLog_PRK) AS IncidentCount FROM IncidentLog_TBL il INNER JOIN IncidentSubSubCategory_TBL iss ON il.inlSubSubCategory_FRK = iss.IncidentSubSubCategory_PRK GROUP BY iss.issName_TXT) AS SubCounts;"}
{"prompt": "List subcategories and how many unique sub-subcategories they have", "completion": "SELECT isc.iscName_TXT, COUNT(DISTINCT iss.IncidentSubSubCategory_PRK) AS SubSubCount FROM IncidentSubCategory_TBL isc LEFT JOIN IncidentSubSubCategory_TBL iss ON iss.issParentSubCategory_FRK = isc.IncidentSubCategory_PRK GROUP BY isc.iscName_TXT;"}
{"prompt": "Count incidents per day over the last 30 days", "completion": "SELECT CAST(il.inlDateTime_DTM AS DATE) AS IncidentDate, COUNT(*) AS DailyCount FROM IncidentLog_TBL il WHERE il.inlDateTime_DTM >= DATEADD(DAY, -30, GETDATE()) GROUP BY CAST(il.inlDateTime_DTM AS DATE) ORDER BY IncidentDate;"}
{"prompt": "Count incidents per hour of the day", "completion": "SELECT DATEPART(HOUR, il.inlDateTime_DTM) AS HourOfDay, COUNT(*) AS IncidentCount FROM IncidentLog_TBL il GROUP BY DATEPART(HOUR, il.inlDateTime_DTM) ORDER BY HourOfDay;"}
{"prompt": "Weekly incident trends over the past 12 weeks", "completion": "SELECT DATEPART(WEEK, il.inlDateTime_DTM) AS WeekNumber, COUNT(*) AS WeeklyCount FROM IncidentLog_TBL il WHERE il.inlDateTime_DTM >= DATEADD(WEEK, -12, GETDATE()) GROUP BY DATEPART(WEEK, il.inlDateTime_DTM) ORDER BY WeekNumber;"}
{"prompt": "Compare incident count this week vs last week", "completion": "SELECT 'ThisWeek' AS Period, COUNT(*) AS Count FROM IncidentLog_TBL WHERE DATEDIFF(WEEK, inlDateTime_DTM, GETDATE()) = 0 UNION ALL SELECT 'LastWeek', COUNT(*) FROM IncidentLog_TBL WHERE DATEDIFF(WEEK, inlDateTime_DTM, GETDATE()) = 1;"}
{"prompt": "Average time to close incidents (in hours)", "completion": "SELECT AVG(DATEDIFF(HOUR, il.inlDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgCloseTime FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL;"}
{"prompt": "Count of incidents reported during night shift (8PM to 6AM)", "completion": "SELECT COUNT(*) AS NightShiftCount FROM IncidentLog_TBL il WHERE DATEPART(HOUR, il.inlDateTime_DTM) >= 20 OR DATEPART(HOUR, il.inlDateTime_DTM) < 6;"}
{"prompt": "Get incidents reported within 1 hour of occurrence", "completion": "SELECT il.inlFileNo_TXT, DATEDIFF(MINUTE, il.inlDateTime_DTM, il.inlReportedDateTime_DTM) AS ReportDelayMins FROM IncidentLog_TBL il WHERE DATEDIFF(MINUTE, il.inlDateTime_DTM, il.inlReportedDateTime_DTM) <= 60;"}
{"prompt": "Incidents closed more than 7 days after being reported", "completion": "SELECT il.inlFileNo_TXT, DATEDIFF(DAY, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM) AS DaysToClose FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL AND DATEDIFF(DAY, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM) > 7;"}
{"prompt": "Show peak hours for incidents in last 7 days", "completion": "SELECT DATEPART(HOUR, il.inlDateTime_DTM) AS Hour, COUNT(*) AS Count FROM IncidentLog_TBL il WHERE il.inlDateTime_DTM >= DATEADD(DAY, -7, GETDATE()) GROUP BY DATEPART(HOUR, il.inlDateTime_DTM) ORDER BY Count DESC;"}
{"prompt": "Daily average number of incidents per week", "completion": "SELECT DATEPART(WEEK, il.inlDateTime_DTM) AS WeekNum, AVG(DailyCount) AS AvgPerDay FROM (SELECT DATEPART(WEEK, il.inlDateTime_DTM) AS Week, CAST(il.inlDateTime_DTM AS DATE) AS Day, COUNT(*) AS DailyCount FROM IncidentLog_TBL il GROUP BY DATEPART(WEEK, il.inlDateTime_DTM), CAST(il.inlDateTime_DTM AS DATE)) AS WeekStats GROUP BY WeekNum;"}
{"prompt": "Count incidents reported on weekends vs weekdays", "completion": "SELECT CASE WHEN DATEPART(WEEKDAY, il.inlDateTime_DTM) IN (1, 7) THEN 'Weekend' ELSE 'Weekday' END AS DayType, COUNT(*) AS Count FROM IncidentLog_TBL il GROUP BY CASE WHEN DATEPART(WEEKDAY, il.inlDateTime_DTM) IN (1, 7) THEN 'Weekend' ELSE 'Weekday' END;"}
{"prompt": "Find incidents that remained open for more than 48 hours", "completion": "SELECT il.inlFileNo_TXT, DATEDIFF(HOUR, il.inlDateTime_DTM, il.inlClosedDateTime_DTM) AS DurationHours FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL AND DATEDIFF(HOUR, il.inlDateTime_DTM, il.inlClosedDateTime_DTM) > 48;"}
{"prompt": "Compare average closure time for incidents reported in morning vs evening", "completion": "SELECT CASE WHEN DATEPART(HOUR, il.inlReportedDateTime_DTM) < 12 THEN 'Morning' ELSE 'Evening' END AS Period, AVG(DATEDIFF(HOUR, il.inlDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgCloseTime FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY CASE WHEN DATEPART(HOUR, il.inlReportedDateTime_DTM) < 12 THEN 'Morning' ELSE 'Evening' END;"}
{"prompt": "Hourly incident trend for a specific date", "completion": "SELECT DATEPART(HOUR, il.inlDateTime_DTM) AS Hour, COUNT(*) AS Count FROM IncidentLog_TBL il WHERE CAST(il.inlDateTime_DTM AS DATE) = @SpecificDate GROUP BY DATEPART(HOUR, il.inlDateTime_DTM);"}
{"prompt": "Average number of incidents per weekday", "completion": "SELECT DATENAME(WEEKDAY, il.inlDateTime_DTM) AS Weekday, AVG(DailyCount) AS AvgIncidents FROM (SELECT DATENAME(WEEKDAY, il.inlDateTime_DTM) AS Day, CAST(il.inlDateTime_DTM AS DATE) AS D, COUNT(*) AS DailyCount FROM IncidentLog_TBL il GROUP BY DATENAME(WEEKDAY, il.inlDateTime_DTM), CAST(il.inlDateTime_DTM AS DATE)) AS T GROUP BY Weekday;"}
{"prompt": "Get incidents closed on the same day they occurred", "completion": "SELECT il.inlFileNo_TXT FROM IncidentLog_TBL il WHERE DATEDIFF(DAY, il.inlDateTime_DTM, il.inlClosedDateTime_DTM) = 0;"}
{"prompt": "Find the date with the highest number of incidents", "completion": "SELECT TOP 1 CAST(il.inlDateTime_DTM AS DATE) AS Date, COUNT(*) AS Count FROM IncidentLog_TBL il GROUP BY CAST(il.inlDateTime_DTM AS DATE) ORDER BY Count DESC;"}
{"prompt": "List incidents where reported date is before occurrence date", "completion": "SELECT il.inlFileNo_TXT, il.inlReportedDateTime_DTM, il.inlDateTime_DTM FROM IncidentLog_TBL il WHERE il.inlReportedDateTime_DTM < il.inlDateTime_DTM;"}
{"prompt": "Get hourly average of incidents for the past 24 hours", "completion": "SELECT DATEPART(HOUR, il.inlDateTime_DTM) AS Hour, COUNT(*) AS IncidentCount FROM IncidentLog_TBL il WHERE il.inlDateTime_DTM >= DATEADD(HOUR, -24, GETDATE()) GROUP BY DATEPART(HOUR, il.inlDateTime_DTM);"}
{"prompt": "Compare incident resolution time for incidents reported on different weekdays", "completion": "SELECT DATENAME(WEEKDAY, il.inlReportedDateTime_DTM) AS Weekday, AVG(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgResolutionTime FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY DATENAME(WEEKDAY, il.inlReportedDateTime_DTM);"}
{"prompt": "Show the count of open and closed incidents overall", "completion": "SELECT ins.insName_TXT AS Status, COUNT(*) AS Count FROM IncidentLog_TBL il JOIN IncidentStatus_TBL ins ON il.inlStatus_FRK = ins.IncidentStatus_PRK GROUP BY ins.insName_TXT;"}
{"prompt": "Get average resolution time (in hours) for all closed incidents", "completion": "SELECT AVG(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgResolutionTime_Hours FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL;"}
{"prompt": "Find top 5 incidents that remained open for the longest time before being closed", "completion": "SELECT TOP 5 il.inlFileNo_TXT, DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM) AS Duration_Hours FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL ORDER BY Duration_Hours DESC;"}
{"prompt": "Count of incidents closed today vs still open", "completion": "SELECT CASE WHEN il.inlClosedDateTime_DTM IS NOT NULL AND CAST(il.inlClosedDateTime_DTM AS DATE) = CAST(GETDATE() AS DATE) THEN 'Closed Today' ELSE 'Open' END AS StatusGroup, COUNT(*) AS Count FROM IncidentLog_TBL il WHERE il.inlStatus_FRK IS NOT NULL GROUP BY CASE WHEN il.inlClosedDateTime_DTM IS NOT NULL AND CAST(il.inlClosedDateTime_DTM AS DATE) = CAST(GETDATE() AS DATE) THEN 'Closed Today' ELSE 'Open' END;"}
{"prompt": "Weekly trend of closed vs raised incidents", "completion": "SELECT DATENAME(WEEK, il.inlReportedDateTime_DTM) AS WeekNum, COUNT(CASE WHEN il.inlClosedDateTime_DTM IS NULL THEN 1 END) AS Opened, COUNT(CASE WHEN il.inlClosedDateTime_DTM IS NOT NULL THEN 1 END) AS Closed FROM IncidentLog_TBL il GROUP BY DATENAME(WEEK, il.inlReportedDateTime_DTM);"}
{"prompt": "Building-wise count of open vs closed incidents", "completion": "SELECT b.bldBuildingName_TXT AS Building, ins.insName_TXT AS Status, COUNT(*) AS Count FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK JOIN IncidentStatus_TBL ins ON il.inlStatus_FRK = ins.IncidentStatus_PRK GROUP BY b.bldBuildingName_TXT, ins.insName_TXT;"}
{"prompt": "Average resolution time of incidents per building", "completion": "SELECT b.bldBuildingName_TXT AS Building, AVG(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgResolutionTime_Hours FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY b.bldBuildingName_TXT;"}
{"prompt": "Number of unresolved incidents per incident category", "completion": "SELECT ic.incName_TXT AS Category, COUNT(*) AS OpenCount FROM IncidentLog_TBL il JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE il.inlClosedDateTime_DTM IS NULL GROUP BY ic.incName_TXT;"}
{"prompt": "Daily trend of incident closures over the last 7 days", "completion": "SELECT CAST(il.inlClosedDateTime_DTM AS DATE) AS ClosedDate, COUNT(*) AS ClosedCount FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL AND il.inlClosedDateTime_DTM >= DATEADD(DAY, -7, GETDATE()) GROUP BY CAST(il.inlClosedDateTime_DTM AS DATE);"}
{"prompt": "Get average incident closure time grouped by status", "completion": "SELECT ins.insName_TXT AS Status, AVG(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgResolutionTime_Hours FROM IncidentLog_TBL il JOIN IncidentStatus_TBL ins ON il.inlStatus_FRK = ins.IncidentStatus_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY ins.insName_TXT;"}
{"prompt": "Find the earliest and latest closed incident per building", "completion": "SELECT b.bldBuildingName_TXT AS Building, MIN(il.inlClosedDateTime_DTM) AS FirstClosure, MAX(il.inlClosedDateTime_DTM) AS LastClosure FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY b.bldBuildingName_TXT;"}
{"prompt": "Top 3 buildings with the most unresolved incidents", "completion": "SELECT TOP 3 b.bldBuildingName_TXT AS Building, COUNT(*) AS OpenCount FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlClosedDateTime_DTM IS NULL GROUP BY b.bldBuildingName_TXT ORDER BY OpenCount DESC;"}
{"prompt": "Distribution of open vs closed incidents by weekday", "completion": "SELECT DATENAME(WEEKDAY, il.inlReportedDateTime_DTM) AS Weekday, COUNT(CASE WHEN il.inlClosedDateTime_DTM IS NULL THEN 1 END) AS OpenIncidents, COUNT(CASE WHEN il.inlClosedDateTime_DTM IS NOT NULL THEN 1 END) AS ClosedIncidents FROM IncidentLog_TBL il GROUP BY DATENAME(WEEKDAY, il.inlReportedDateTime_DTM);"}
{"prompt": "Total number of incidents per status per week", "completion": "SELECT DATENAME(WEEK, il.inlReportedDateTime_DTM) AS WeekNum, ins.insName_TXT AS Status, COUNT(*) AS IncidentCount FROM IncidentLog_TBL il JOIN IncidentStatus_TBL ins ON il.inlStatus_FRK = ins.IncidentStatus_PRK GROUP BY DATENAME(WEEK, il.inlReportedDateTime_DTM), ins.insName_TXT;"}
{"prompt": "Top incident categories with the most closed incidents", "completion": "SELECT TOP 5 ic.incName_TXT AS Category, COUNT(*) AS ClosedCount FROM IncidentLog_TBL il JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY ic.incName_TXT ORDER BY ClosedCount DESC;"}
{"prompt": "Count of closed incidents per zone (if available)", "completion": "SELECT il.inlZone_FRK AS Zone, COUNT(*) AS ClosedCount FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY il.inlZone_FRK;"}
{"prompt": "Compare average resolution time for each category of incident", "completion": "SELECT ic.incName_TXT AS Category, AVG(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgResolutionTime_Hours FROM IncidentLog_TBL il JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY ic.incName_TXT;"}
{"prompt": "Show timeline of incident closures over the last month", "completion": "SELECT CAST(il.inlClosedDateTime_DTM AS DATE) AS ClosedDate, COUNT(*) AS ClosedCount FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL AND il.inlClosedDateTime_DTM >= DATEADD(MONTH, -1, GETDATE()) GROUP BY CAST(il.inlClosedDateTime_DTM AS DATE) ORDER BY ClosedDate ASC;"}
{"prompt": "Get the longest time taken to resolve incidents for each category", "completion": "SELECT ic.incName_TXT AS Category, MAX(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM)) AS MaxResolutionTime_Hours FROM IncidentLog_TBL il JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY ic.incName_TXT;"}
{"prompt": "Show how many alerts are still open that were created more than a week ago", "completion": "SELECT COUNT(*) AS AgedOpenAlerts FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NULL AND il.inlReportedDateTime_DTM < DATEADD(DAY, -7, GETDATE());"}
{"prompt": "List buildings with more than 5 open incidents", "completion": "SELECT b.bldBuildingName_TXT, COUNT(*) AS OpenIncidentCount FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlClosedDateTime_DTM IS NULL GROUP BY b.bldBuildingName_TXT HAVING COUNT(*) > 5;"}
{"prompt": "Find incidents that were reported but not closed within 3 days", "completion": "SELECT il.inlFileNo_TXT, DATEDIFF(DAY, il.inlReportedDateTime_DTM, GETDATE()) AS DaysOpen FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NULL AND DATEDIFF(DAY, il.inlReportedDateTime_DTM, GETDATE()) > 3;"}
{"prompt": "Show average time to close incidents per incident status", "completion": "SELECT ist.insName_TXT AS Status, AVG(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgCloseTime FROM IncidentLog_TBL il JOIN IncidentStatus_TBL ist ON il.inlStatus_FRK = ist.IncidentStatus_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY ist.insName_TXT;"}
{"prompt": "Identify categories with high number of unresolved incidents", "completion": "SELECT ic.incName_TXT AS Category, COUNT(*) AS OpenIncidents FROM IncidentLog_TBL il JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE il.inlClosedDateTime_DTM IS NULL GROUP BY ic.incName_TXT HAVING COUNT(*) > 10;"}
{"prompt": "Get average number of incidents reported per day", "completion": "SELECT AVG(DailyCount) AS AvgDailyIncidents FROM (SELECT CAST(il.inlDateTime_DTM AS DATE) AS ReportDate, COUNT(*) AS DailyCount FROM IncidentLog_TBL il GROUP BY CAST(il.inlDateTime_DTM AS DATE)) AS DailyStats;"}
{"prompt": "Find buildings with incidents closed the same day as reported", "completion": "SELECT DISTINCT b.bldBuildingName_TXT FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE DATEDIFF(DAY, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM) = 0;"}
{"prompt": "List incident categories resolved in under an hour", "completion": "SELECT ic.incName_TXT AS Category, COUNT(*) AS QuickResolutions FROM IncidentLog_TBL il JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK WHERE il.inlClosedDateTime_DTM IS NOT NULL AND DATEDIFF(MINUTE, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM) <= 60 GROUP BY ic.incName_TXT;"}
{"prompt": "Count of incidents with arrests grouped by status", "completion": "SELECT ist.insName_TXT AS Status, COUNT(*) AS ArrestedIncidents FROM IncidentLog_TBL il JOIN IncidentStatus_TBL ist ON il.inlStatus_FRK = ist.IncidentStatus_PRK WHERE il.inlArrestsMade_BLN = 1 GROUP BY ist.insName_TXT;"}
{"prompt": "Total incidents with fines grouped by building", "completion": "SELECT b.bldBuildingName_TXT, COUNT(*) AS FinedIncidents FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlFinesMade_BLN = 1 GROUP BY b.bldBuildingName_TXT;"}
{"prompt": "Show number of incidents for vulnerable buildings only", "completion": "SELECT b.bldBuildingName_TXT, COUNT(*) AS IncidentCount FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE b.bldVunerableBuilding_BLN = 1 GROUP BY b.bldBuildingName_TXT;"}
{"prompt": "Find buildings with no incidents closed in the last 30 days", "completion": "SELECT b.bldBuildingName_TXT FROM Building_TBL b WHERE NOT EXISTS (SELECT 1 FROM IncidentLog_TBL il WHERE il.inlBuilding_FRK = b.Building_PRK AND il.inlClosedDateTime_DTM >= DATEADD(DAY, -30, GETDATE()));"}
{"prompt": "Top 3 zones with highest number of closed incidents", "completion": "SELECT il.inlZone_FRK AS Zone, COUNT(*) AS ClosedCount FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY il.inlZone_FRK ORDER BY ClosedCount DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY;"}
{"prompt": "Average open time for incidents still unresolved", "completion": "SELECT AVG(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, GETDATE())) AS AvgOpenTime_Hours FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NULL;"}
{"prompt": "Incident count by category and building", "completion": "SELECT ic.incName_TXT AS Category, b.bldBuildingName_TXT AS Building, COUNT(*) AS IncidentCount FROM IncidentLog_TBL il JOIN IncidentCategory_TBL ic ON il.inlCategory_FRK = ic.IncidentCategory_PRK JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK GROUP BY ic.incName_TXT, b.bldBuildingName_TXT;"}
{"prompt": "Compare incident distribution between weekdays and weekends", "completion": "SELECT CASE WHEN DATEPART(WEEKDAY, il.inlDateTime_DTM) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END AS DayType, COUNT(*) AS IncidentCount FROM IncidentLog_TBL il GROUP BY CASE WHEN DATEPART(WEEKDAY, il.inlDateTime_DTM) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END;"}
{"prompt": "List buildings where incidents had fines and arrests both", "completion": "SELECT DISTINCT b.bldBuildingName_TXT FROM IncidentLog_TBL il JOIN Building_TBL b ON il.inlBuilding_FRK = b.Building_PRK WHERE il.inlFinesMade_BLN = 1 AND il.inlArrestsMade_BLN = 1;"}
{"prompt": "Monthly average closure time of incidents", "completion": "SELECT DATENAME(MONTH, il.inlClosedDateTime_DTM) AS MonthName, AVG(DATEDIFF(HOUR, il.inlReportedDateTime_DTM, il.inlClosedDateTime_DTM)) AS AvgClosureTime_Hours FROM IncidentLog_TBL il WHERE il.inlClosedDateTime_DTM IS NOT NULL GROUP BY DATENAME(MONTH, il.inlClosedDateTime_DTM);"}
{"prompt": "Find incidents where status is null but category exists", "completion": "SELECT il.inlFileNo_TXT FROM IncidentLog_TBL il WHERE il.inlStatus_FRK IS NULL AND il.inlCategory_FRK IS NOT NULL;"}
{"prompt": "Average daily open incident count in the last week", "completion": "SELECT AVG(OpenCount) AS AvgOpenDaily FROM (SELECT CAST(inlReportedDateTime_DTM AS DATE) AS Day, COUNT(*) AS OpenCount FROM IncidentLog_TBL WHERE inlClosedDateTime_DTM IS NULL AND inlReportedDateTime_DTM >= DATEADD(DAY, -7, GETDATE()) GROUP BY CAST(inlReportedDateTime_DTM AS DATE)) AS DailyOpen;"}
{"prompt": "Get the day of week with highest average number of incident closures", "completion": "SELECT TOP 1 DATENAME(WEEKDAY, inlClosedDateTime_DTM) AS DayOfWeek, AVG(CountPerDay) AS AvgClosures FROM (SELECT CAST(inlClosedDateTime_DTM AS DATE) AS ClosureDate, COUNT(*) AS CountPerDay FROM IncidentLog_TBL WHERE inlClosedDateTime_DTM IS NOT NULL GROUP BY CAST(inlClosedDateTime_DTM AS DATE)) AS DailyClosure GROUP BY DATENAME(WEEKDAY, ClosureDate) ORDER BY AvgClosures DESC;"}